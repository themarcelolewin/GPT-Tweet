#
# Created by Creative Spark AI
# by Marcelo Lewin
# CreativeSpark.ai
#

# Tweepy is for posting to Twitter.  
# OpenAI is for querying GPT3. 
# ConfigParser is for keeping the API keys in a separate file and reading those in.
import tweepy
import openai
from configparser import ConfigParser

# Read in configuration file.
configuration = ConfigParser()
configuration.read('config.ini')

# Get OpenAI Credentials
openai_api_key = configuration.get("openai", "api_key")

# Get Twitter Credentials
twitter_consumer_key = configuration.get("twitter", "consumer_key")
twitter_consumer_key_secret = configuration.get("twitter", "consumer_key_secret")
twitter_access_token = configuration.get("twitter", "access_token")
twitter_access_token_secret = configuration.get("twitter", "access_token_secret")

# Authenticate and create an API client
client = tweepy.Client(consumer_key=twitter_consumer_key,
                       consumer_secret=twitter_consumer_key_secret, 
                       access_token=twitter_access_token, 
                       access_token_secret=twitter_access_token_secret)

# Set the API key for Open AI
openai.api_key = openai_api_key

# Function which will query GPT-3
def generate_response(text):
    response = openai.Completion.create(
        engine="text-davinci-003",
        prompt=text,
        temperature=0.5,
        max_tokens=128,
        top_p=1,
        frequency_penalty=0,
        presence_penalty=0
    ).get('choices')[0].get('text')
    return response

# Define the promp to send to GPT-3
prompt = "Create a random AI related term with its definition all in one line. Do not add anything else to your response.  Keep it under 240 characters long. At the end, add some AI related hash tags."

# Query GPT3
gpt3_response=generate_response(prompt)

# Tweet response from GPT3
client.create_tweet(text=f'Daily #AI term auto generated by GPT-3:{gpt3_response}')

# Print to terminal
print(f'Daily #AI term auto generated by GPT-3:{gpt3_response}')
